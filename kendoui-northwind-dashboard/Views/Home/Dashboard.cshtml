
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*<div class="main-section-content row">
        <div id="employee-list" class="col col-xs-3">
            <div id="EmployeesList" data-role="listview" class="k-widget k-listview k-selectable" role="listbox">
                <h3>NOTIFICATIONS</h3>
                <div class="employee k-state-selected" role="option" aria-selected="true">
                    <div class="employee-wrapper">
                        <dl class="employee-list-details">
                            <dt class="name">Payment Request</dt>
                            <dd class="title">@System.DateTime.Now</dd>
                        </dl>
                    </div>
                </div>
                @{
                    for (int i = 0; i < 10; i++)
                    {
                        <div class="employee" aria-selected="false">
                            <div class="employee-wrapper">
                                <dl class="employee-list-details">
                                    <dt class="name">Payment Request</dt>
                                    <dd class="title">@System.DateTime.Now</dd>
                                </dl>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        <div id="employee-about" class="col-xs-12 placeholder">
            <div class="row">

            </div>
        </div>
    </div>*@


<div class="main-section-content row" style="">
    <div id="Employees-List" class="col-xs-1 column">
        <h3 style="color:white"><b>NOTIFICATIONS</b></h3>
        <div class="collapse navbar-collapse" id="sidebar-nav" role="navigation">
            <ul class="nav">
                @{
                    for (int i = 0; i < 10; i++)
                    {
                        <li class="employee" aria-selected="false">
                            <div class="employee-wrapper">
                                <dl class="employee-list-details">
                                    <dt class="name"><b>Payment Request</b></dt>
                                    <dd class="title">@System.DateTime.Now</dd>
                                </dl>
                            </div>
                        </li>
                    }
                }
            </ul>
        </div>

    </div>

    <div id="employee-details-wrapper">
        <div id="employee-details" class="row">
            <div id="employee-about">
                <div class="row">
                    <div id="employeeBio" class="col-xs-12 col-sm-8" data-role="tooltip">
                        <div>
                            <h4 class="MainLbl">Freedom Tmp WSA: Sewage Treatment Plant</h4>
                            <table class="col-md-12">
                                <tr class="col-md-5 Dashboard-Info">
                                    <td>
                                        <span class="info">ID:</span><span>07027021102-CS</span>
                                    </td>
                                </tr>
                                <tr class="col-md-7 Dashboard-Info">
                                    <td>
                                        <span class="info">Company:</span><span> Freedom Water and Sewer Authority</span>
                                    </td>
                                </tr>
                                <tr class="col-md-5 Dashboard-Info">
                                    <td>
                                        <span class="info">Loan:</span><span>72383</span>
                                    </td>
                                </tr>
                                <tr class="col-md-7 Dashboard-Info">
                                    <td>
                                        <span class="info">Legal Entity:</span><span>Freedom Township</span>
                                    </td>
                                </tr>
                                <tr class="col-md-5 Dashboard-Info">
                                    <td>
                                        <span class="info">Status:</span><span>Final Amoritization</span>
                                    </td>
                                </tr>
                                <tr class="col-md-7 Dashboard-Info">
                                    <td>
                                        <span class="info">Business Pertner Number:</span><span>ABC01123</span>
                                    </td>
                                </tr>
                                <tr class="col-md-5 Dashboard-Info">
                                    <td>
                                        <span class="info">Specialist:</span><span>Teresa Schlupp</span>
                                    </td>
                                </tr>
                                <tr class="col-md-7 Dashboard-Info">
                                    <td>
                                        <span class="info">Approval Date:</span><span>10/26/2011</span>
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <h3>FUNDS AVAILABLE</h3>
                        <span id="FundsAvailable" class="LblGreen">$62,032.97</span>
                        <div class="sparkline-container">
                            <div class="k-chart" id="EmployeeQuarterSales" style="height: 30px; position: relative;" data-role="chart">
                                <svg style="width: 100%; height: 100%; overflow: hidden; left: -0.328125px; top: -0.34375px;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
                                    <defs>
                                        <clipPath id="kdef31">
                                            <path d="M5 5 L 331 5 331 20 5 20Z" stroke="#000" stroke-linejoin="miter" fill="none"></path>
                                        </clipPath>
                                    </defs>
                                    <g>
                                        <path d="M0 0 L 337 0 337 30 0 30Z" stroke="none" fill="#F5F5F5"></path>
                                        <path d="M5 5 L 331 5 331 20 5 20Z" stroke="none" fill="#fff" fill-opacity="0">
                                        </path>
                                        <g><g></g><g></g><g></g><g clip-path="url(#kdef31)"><g><g><g><path d="M5.5 10.5 L 128.5 10.5 128.5 16.5 5.5 16.5Z" stroke="#8ebc00" stroke-width="1" stroke-opacity="1" fill="#8ebc00" fill-opacity="1"></path><path d="M308.625 5 L 310.625 5 310.625 20 308.625 20Z" stroke="green" stroke-width="0" stroke-opacity="1" fill="#ff0000" fill-opacity="1"></path></g></g></g></g><g><g><path d="M5.5 20.5 L 331.5 20.5" stroke="#c7c7c7" stroke-width="1" fill="none"></path></g></g></g>
                                        <g></g>
                                    </g>
                                </svg>
                            </div>

                        </div>
                        <h3>CONTRACT APPROVAL</h3>
                        <span id="ContractApproval" class="LblGreen">11/13</span>
                        <div class="sparkline-container">
                            <div class="k-chart" id="EmployeeQuarterSales" style="height: 30px; position: relative;" data-role="chart">
                                <svg style="width: 100%; height: 100%; overflow: hidden; left: -0.328125px; top: -0.34375px;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
                                    <defs>
                                        <clipPath id="kdef31">
                                            <path d="M5 5 L 331 5 331 20 5 20Z" stroke="#000" stroke-linejoin="miter" fill="none">
                                            </path>
                                        </clipPath>
                                    </defs>
                                    <g>
                                        <path d="M0 0 L 337 0 337 30 0 30Z" stroke="none" fill="#F5F5F5">
                                        </path>
                                        <path d="M5 5 L 331 5 331 20 5 20Z" stroke="none" fill="#fff" fill-opacity="0">
                                        </path>
                                        <g>
                                            <g></g>
                                            <g></g>
                                            <g></g>
                                            <g clip-path="url(#kdef31)">
                                                <g>
                                                    <g>
                                                        <g>
                                                            <path d="M5.5 10.5 L 128.5 10.5 128.5 16.5 5.5 16.5Z" stroke="#8ebc00" stroke-width="1" stroke-opacity="1" fill="#8ebc00" fill-opacity="1"></path>
                                                            <path d="M308.625 5 L 310.625 5 310.625 20 308.625 20Z" stroke="green" stroke-width="0" stroke-opacity="1" fill="#ff0000" fill-opacity="1"></path>
                                                        </g>
                                                    </g>
                                                </g>
                                            </g>
                                            <g><g><path d="M5.5 20.5 L 331.5 20.5" stroke="#c7c7c7" stroke-width="1" fill="none"></path></g></g>
                                        </g>
                                        <g></g>
                                    </g>
                                </svg>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
            <div id="employee-details-wrapper">
                <div id="employee-details" class="row">
                    <div id="budget-current">
                        <span class="LblBlue">
                            CURRENT BUDGET DURING DISPURSEMENT
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@*@using KendoUI.Northwind.Dashboard.Models;
    @using Kendo.Mvc.UI;
    @{
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    <script src="@Url.Content("~/Scripts/chroma.min.js")"></script>
    <script type="text/javascript">
        var scale = chroma.scale(["#ade1fb", "#097dc6"]).domain([1, 100]),
            selectedShape = null,
            selectedCountry = "USA";

        function resizeMap() {
            var map = $("#map").data("kendoMap");
            map.resize();
            map.center([50.000, 0]);
        }

        function setSparkLinesWidths() {
            var containerWidth = $(".sparkline-container").parent().width(),
                getSparkLines = $(".k-sparkline"),
                sparkLineWidth = (80 * containerWidth) / 100;

            getSparkLines.each(function () {
                $(this).data("kendoSparkline").setOptions({ chartArea: { width: sparkLineWidth } });
            });

            $("#TopSellingProducts").data("kendoChart").resize();
            $("#MarketShare").data("kendoChart").resize();
        }

        function ListCustomers(country) {
            $("#countryName").text(country);
            $.ajax({
                url: "@Url.Action("CountryCompanies", "RegionalSales")",
                dataType: "json",
                data: { Country: country },
                type: "POST",
                success: function (response) {
                    var customers = "";
                    for (var i = 0; i < response.length; i++) {
                        customers = customers + response[i].CompanyName + ", ";
                    }
                    customers = customers.substring(0, customers.length - 2);
                    $("#countryCustomers span").text(customers);
                }
            });
            var containerWidth = $(".sparkline-container").parent().width(),
                getSparkLines = $(".k-sparkline"),
                chartWidth = (80 * containerWidth) / 100;

                getSparkLines.each(function () {
                    $(this).data("kendoSparkline").setOptions({ chartArea: { width: chartWidth} });
                });

                $("#TopSellingProducts").data("kendoChart").resize();
                $("#MarketShare").data("kendoChart").resize();
        }

        function onMarketShareDataBound(e) {
            var percentage = 0,
                revenue = 0;
            if (this.dataSource.data().length == 2) {
                percentage = (this.dataSource.at(1).Sales / this.dataSource.at(0).Sales);
                revenue = this.dataSource.at(1).Sales;
            }

            $("#MarketShareLabel").text(kendo.toString(percentage, "p2"));
            $("#RevenueLabel").text(kendo.toString(revenue, "c2"));

            $("#RevenueNoData").toggle(revenue === 0);
            $("#MarketShareNoData").toggle(percentage === 0);
            if(percentage === 0){
                $("#MarketShare").css({visibility: "hidden"});
            }else{
                $("#MarketShare").css({visibility: "visible"});
            }
        }

        function onTopProductsDataBound() {
            var items = this.dataSource.data().length;
            $("#ProductsNoData").toggle(items===0);
        }

        function onCriteriaChange() {
            var MarketShare = $("#MarketShare").data("kendoChart"),
                TopSellingProducts = $("#TopSellingProducts").data("kendoChart"),
                Revenue = $("#Revenue").data("kendoSparkline"),
                Orders = $("#Orders").data("kendoSparkline"),
                Customers = $("#Customers").data("kendoSparkline"),
                fromDate = $("#StartDate").data("kendoDatePicker").value(),
                toDate = $("#EndDate").data("kendoDatePicker").value();

            $.ajax({
                url: "@Url.Action("CountryOrdersTotal", "RegionalSales")",
                dataType: "json",
                data: { Country: selectedCountry, FromDate: fromDate.toJSON(), ToDate: toDate.toJSON() },
                type: "POST",
                success: function (response) {
                    $("#OrdersLabel").text(response.Orders);
                    $("#OrdersNoData").toggle(response.Orders === 0);
                }
            });

            $.ajax({
                url: "@Url.Action("CountryCustomersTotal", "RegionalSales")",
                dataType: "json",
                data: { Country: selectedCountry, FromDate: fromDate.toJSON(), ToDate: toDate.toJSON() },
                type: "POST",
                success: function (response) {
                    $("#CustomersLabel").text(response.Customers);
                    $("#CustomersNoData").toggle(response.Customers[0] === 0);
                }
            });

            MarketShare.dataSource.read({ Country: selectedCountry, FromDate: fromDate, ToDate: toDate });
            TopSellingProducts.dataSource.read({ Country: selectedCountry, FromDate: fromDate, ToDate: toDate });
            Revenue.dataSource.read({ Country: selectedCountry, FromDate: fromDate, ToDate: toDate });
            Orders.dataSource.read({ Country: selectedCountry, FromDate: fromDate, ToDate: toDate });
            Customers.dataSource.read({ Country: selectedCountry, FromDate: fromDate, ToDate: toDate });

            ListCustomers(selectedCountry);

            setSparkLinesWidths();
        }

        function onShapeCreated(e) {
            var color = scale(e.shape.dataItem.properties.sales).hex();
            e.shape.fill(color);
        }

        function onShapeClick(e) {
            if (selectedShape) {
                var sales = selectedShape.dataItem.properties.sales;
                var color = scale(sales).hex();
                selectedShape.options.set("fill.color", color);
                selectedShape.options.set("stroke.color", "white");
                selectedShape.dataItem.properties.selected = false;
            }

            e.shape.options.set("fill.color", "#0c669f");
            e.shape.options.set("stroke.color", "black");
            e.shape.dataItem.properties.selected = true;
            selectedShape = e.shape;
            selectedCountry = selectedShape.dataItem.properties.name;

            onCriteriaChange();
        }

        function onShapeMouseEnter(e) {
            e.shape.options.set("fill.color", "#0c669f");
        }

        function onShapeMouseLeave(e) {
            if (!e.shape.dataItem.properties.selected) {
                var sales = e.shape.dataItem.properties.sales;
                var color = scale(sales).hex();
                e.shape.options.set("fill.color", color);
                e.shape.options.set("stroke.color", "white");
            }
        }
    </script>

    <div id="main-section-header" class="row">
        <h2 id="team-efficiency" class="col-xs-3">Regional sales status</h2>
        <div id="dateFilter" class="col-xs-9">
            <div class="period-wrapper">
                <label for="StartDate" class="select-period">Stats from</label>
                @(Html.Kendo().DatePicker()
                    .Name("StartDate")
                    .Value(new DateTime(1996, 1, 1))
                    .Events(e=>e.Change("onCriteriaChange"))
                )
                <span class="k-invalid-msg" data-for="StartDate"></span>
            </div>
            <div class="period-wrapper">
                <label for="EndDate" class="select-period">To</label>
                @(Html.Kendo().DatePicker()
                    .Name("EndDate")
                    .Value(new DateTime(1998, 8, 1))
                    .Events(e=>e.Change("onCriteriaChange"))
                )
                <span class="k-invalid-msg" data-for="EndDate"></span>
            </div>
        </div>
        <div style="clear:both;"></div>
    </div>

    <div id="regional-sales" class="main-section-content row">
        <div id="map-wrapper" class="row">
            <div id="map-details" class="col-xs-2">
                <h3 class="section-header">Pick a Country to view stats</h3>
                <h3 class="section-header">COUNTRY</h3>
                <h2 id="countryName"></h2>
                <h3 class="section-header">CUSTOMERS</h3>
                <div id="countryCustomers"><span></span></div>
            </div>
            <div id="map-container" class="col-xs-10">
                @(Html.Kendo().Map()
                    .Name("map")
                    .Center(50.000, 0)
                    .Zoom(2)
                    .Layers(layers =>
                    {
                        layers.Add()
                            .Style(style => style
                                .Fill(fill => fill.Color("#1996E4"))
                                .Stroke(stroke => stroke.Color("#FFFFFF"))
                            )
                            .Type(MapLayerType.Shape)
                            .DataSource(dataSource => dataSource
                                .GeoJson()
                                .Read(read => read.Url(Url.Content("~/Content/countries-sales.geo.json")))
                            );
                    })
                    .Events(events => events
                        .ShapeCreated("onShapeCreated")
                        .ShapeMouseEnter("onShapeMouseEnter")
                        .ShapeMouseLeave("onShapeMouseLeave")
                        .ShapeClick("onShapeClick")
                    )
                    .Zoomable(false)
                )
            </div>
        </div>

        <div id="statsContainer" class="row">
            <div id="marketShareContainer" class="col-xs-3 stats-graph">
                 <h3 class="section-header">Market share</h3>
                 <span id="MarketShareLabel"></span>
                <div class="sparkline-container">
                    @(Html.Kendo().Chart<CountryMarketShare_Result>()
                        .Name("MarketShare")
                        .Theme("metro")
                        .HtmlAttributes(new { @style="height: 100px;"})
                        .AutoBind(false)
                        .Events(e=>e.DataBound("onMarketShareDataBound"))
                        .Legend(legend => legend
                            .Visible(false)
                        )
                        .DataSource(ds => ds
                            .Read(read => read.Action("MarketShareByCountry", "RegionalSales"))
                        )
                        .Series(series => {
                            series.Donut("Sales", "Country").Padding(0);
                        })
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Template("#= dataItem.Country #: #= kendo.toString(dataItem.Sales, 'c2') #")
                        )
                    )
                    <div id="MarketShareNoData" class="overlay"><div>No data available</div></div>
                </div>
            </div>
            <div id="revenueContainer" class="col-xs-3 stats-graph">
                 <h3 class="section-header">Revenue</h3>
                 <span id="RevenueLabel"></span>
                 <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<CountryRevenue_Result>()
                        .Name("Revenue")
                        .Theme("metro")
                        .HtmlAttributes(new { @style="height: 100px;"})
                        .AutoBind(false)
                        .DataSource(ds => ds
                            .Read(read => read.Action("CountryRevenue", "RegionalSales"))
                        )
                        .Series(series =>
                        {
                            series.Column(x => x.Value).CategoryField("Date").Aggregate(ChartSeriesAggregate.Sum).Color("#1996e4").Gap(0.2);

                        })
                        .CategoryAxis(axis=>axis
                            .Date()
                            .BaseUnit(ChartAxisBaseUnit.Months)
                        )
                        .Tooltip(t=>t.Format("{0:c2}"))
                    )
                     <div id="RevenueNoData" class="overlay"><div>No data available</div></div>
                 </div>
             </div>
             <div id="ordersContainer" class="col-xs-3 stats-graph">
                <h3 class="section-header">Orders</h3>
                <span id="OrdersLabel"></span>
                <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<CountryOrders_Result>()
                        .Name("Orders")
                        .Theme("metro")
                        .HtmlAttributes(new { @style="height: 100px;"})
                        .AutoBind(false)
                        .DataSource(ds => ds
                            .Read(read => read.Action("CountryOrders", "RegionalSales"))
                        )
                        .Series(series =>
                        {
                            series.Column(x => x.Value).CategoryField("Date").Aggregate(ChartSeriesAggregate.Sum).Color("#1996e4").Gap(0.2);
                        })
                        .CategoryAxis(axis=>axis
                            .Date()
                            .BaseUnit(ChartAxisBaseUnit.Months)
                        )
                    )
                    <div id="OrdersNoData" class="overlay"><div>No data available</div></div>
                </div>
            </div>
            <div id="customersContainer" class="col-xs-3 stats-graph">
                 <h3 class="section-header">Customers</h3>
                 <span id="CustomersLabel"></span>
                 <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<CountryCustomers_Result>()
                        .Name("Customers")
                        .Theme("metro")
                        .HtmlAttributes(new { @style="height: 100px;"})
                        .AutoBind(false)
                        .DataSource(ds => ds
                            .Read(read => read.Action("CountryCustomers", "RegionalSales"))
                        )
                        .Series(series =>
                        {
                            series.Column(x => x.Value).CategoryField("Date").Aggregate(ChartSeriesAggregate.Sum).Color("#1996e4").Gap(0.2);
                        })
                        .CategoryAxis(axis=>axis
                            .Date()
                            .BaseUnit(ChartAxisBaseUnit.Months)
                        )
                    )
                     <div id="CustomersNoData" class="overlay"><div>No data available</div></div>
                </div>
            </div>
        </div>

        <div id="topProductsContainer">
            <h3 class="section-header">Top selling products</h3>
            @(Html.Kendo().Chart<CountryTopProducts_Result>()
                .Name("TopSellingProducts")
                .Theme("metro")
                .AutoBind(false)
                .Legend(legend => legend
                    .Visible(true)
                    .Position(ChartLegendPosition.Top)
                )
                .ChartArea(ch=>ch.Background("#eeeeee"))
                .Events(e=>e.DataBound("onTopProductsDataBound"))
                .ChartArea(ch => ch.Background("#eeeeee"))
                .DataSource(ds => ds
                    .Group(g => g.Add(f => f.ProductName))
                    .Read(read => read.Action("TopSellingProducts", "RegionalSales")))
                .Series(series =>
                {
                    series.Line(model => model.Quantity).Style(ChartLineStyle.Smooth).Markers(false);

                })
                .HtmlAttributes(new { @style="height: 260px;"})
                .CategoryAxis(axis => axis
                    .Categories(model => model.Date)
                    .MajorGridLines(m => m.Visible(false))
                    .Line(l => l.Width(0))
                    .Labels(l => l.Visible(false))
                )
                .ValueAxis(axis => axis.Numeric()
                    .MajorUnit(50)
                    .MajorTicks(x => x.Visible(false))
                    .MajorGridLines(m => m.Visible(false))
                    .Line(l => l.Visible(false))
                    .Labels(l => l.Visible(false))
                )
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Template("#=data.series.name.replace(data.series.field, data.value)#"))
            )
            <div id="ProductsNoData" class="overlay"><div>No data available</div></div>
        </div>
    </div>

    <script type="text/javascript">
        $(document).ready(function () {
            $("#Dashboard").addClass("active");
            $("#dateFilter").kendoValidator({
                rules: {
                    startDate: function (input) {
                        if (input.is("#StartDate")) {
                            startDate = kendo.parseDate(input.val());
                            endDate = kendo.parseDate($("#EndDate").val());
                            if (startDate > endDate) {
                                return false;
                            }
                        }
                        return true;
                    },
                    endDate: function (input) {
                        if (input.is("#EndDate")) {
                            startDate = kendo.parseDate($("#StartDate").val());
                            endDate = kendo.parseDate(input.val());
                            if (startDate > endDate) {
                                return false;
                            }
                        }
                        return true;
                    },
                },
                messages: {
                    startDate: "Start date should preceed the End date.",
                    endDate: "End date should not preceed the Start date."
                }
            });
            onCriteriaChange();
            $(window).resize(setSparkLinesWidths);
            $(window).resize(resizeMap);
        });
    </script>*@
